import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;




public class Comms {


	static private ObjectOutputStream output; // output stream 
	static private ObjectInputStream input; // input stream
	static private Socket client; // communication with server

	
	public void runClient(Message message){
		// connect to server
		try 
	      {
	         connectToServer(); // create connection
	         establishConnection(); // get the streams
	         sendMessage(message);
	         receiveMessage(); // process recieved message
	      } // end try
	      catch ( EOFException eofException ) 
	      {
	       //TODO AutoGenerated catch block
	      } 
	      catch ( Exception Exception ) 
	      {
	    	  //TODO AutoGenerated catch block
	      } 
	      finally 
	      { 

	         close(); // close connection
	      } 
		
	}
	
	public static void connectToServer(){
		
			System.err.println("Connecting to server");
		
		try {
			client = new Socket("localhost", 4444);
		} catch (UnknownHostException e) {
			//TODO AutoGenerated catch block
			System.err.println("local host unavalible");
		} catch (IOException e) {
			//TODO AutoGenerated catch block
			System.err.println("Error IO connection not established");
		}

	}
	
	public static void establishConnection() throws IOException{
		
			System.err.println("Opening Streams!!!!!!!!!!!");
		
	    // set up output stream for objects
	      output = new ObjectOutputStream( client.getOutputStream());      
	      output.flush(); // flush output buffer 

	      // set up input stream for objects
	      input = new ObjectInputStream( client.getInputStream() );
	}


	//stores message on the server 
	public static void sendMessage(Message message){
		 try {
			 output.reset();
			output.writeObject(message);   
			output.flush(); // flush data to output
		} catch (IOException e) 
			{	e.printStackTrace();}
        

		 System.out.println("CLIENT-> "+message);

	}


	//displays message to the user
	public static Message receiveMessage(){
		Message message;
		try {
			message = (Message) input.readObject();
			// read new message
			  System.out.println("SERVER->  "+message);
			 if(message instanceof RegisterMessage)
				 ((RegisterMessage) message).getUser();
			 return message;
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return null;
	}
	
	
	 // close streams 
	   private void close() 
	   {

	      try 
	      {
	         output.close(); // close output stream
	         input.close(); // close input stream
	         client.close(); // close socket
	      } // end try
	      catch ( IOException ioException ) 
	      {
	         ioException.printStackTrace();
	      } 
	   } 

	
	



}
